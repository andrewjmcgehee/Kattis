#!/bin/bash

# invalid number of args
if [[ "$#" -lt 2 ]] || [[ "$#" -gt 2 ]]; then
  echo "Usage: kattis <kattis-problem-id> <language-file-extension>"
  echo "Sample: kattis hello cpp"
  exit
fi

# check dependencies
DEPS=( "curl" "grep" )
for dep in "${DEPS[@]}"; do
  command -v $dep >/dev/null 2>&1 || {
    echo >&2 "$dep required";
    OK=0;
  }
done

# not all dependencies met
if [[ $OK -eq 1 ]]; then
  exit
fi

# get location for files and folders
CURRENT_DIR=$( pwd )
SAMPLEDIR="$CURRENT_DIR/$1"

# create directory
mkdir -p $1
cd $1

# download and unzip sample ins
curl -sL "https://open.kattis.com/problems/$1/file/statement/samples.zip" -o "sample.zip"
unzip -q "sample.zip"
rm "sample.zip"

LANGS=( "py" "cpp" "java" )
for lang in "${LANGS[@]}"; do
  echo $2 | grep -i "$lang" >/dev/null
  if [[ $? == 0 ]]; then
    EXTENSION=$lang
    break
  fi
done

# check file extension unset
if [[ -z "$EXTENSION" ]]; then
  echo "Language extension \"$2\" not supported"
  exit
fi

# get difficulty info from website
HTML=$( curl -sL "https://open.kattis.com/problems/$1" )
RATING=$( echo "$HTML" | grep -Go "Difficulty:[ a-z</>]*[0-9].[0-9]" )
RATING=${RATING:(-3)}

case $EXTENSION in

################################################################################
# PYTHON
################################################################################

"py")
touch "$1.py"
cat > "$1.py" << EOL
# Rating: ~ $RATING / 10
# Link: https://open.kattis.com/problems/$1

def main():


if __name__ == '__main__':
  main()
EOL

# make script for running test cases for python alias
touch "run"
chmod +x "run"
cat > "run" << EOL
#!/bin/bash

if [[ "\$#" -ne 1 ]]; then
  echo "Usage: ./run <python-version>"
  echo "Sample: ./run 3"
  exit
fi

if [[ "\$1" -lt 2 ]] || [[ "\$1" -gt 3 ]]; then
  echo "Invalid python version"
  exit
fi

case \$1 in
  2)
  for i in \$( ls ); do
    if [[ \$i == *".in" ]]; then
      echo "Running test case \"\$i\"..."
      echo "<< BEGIN TEST CASE OUTPUT >>"
      python $1.py < \$i
      echo "<< END TEST CASE OUTPUT >>"
      printf '\n'
    fi
  done
  ;;
  3)
  for i in \$( ls ); do
    if [[ \$i == *".in" ]]; then
      echo "Running test case \"\$i\"..."
      echo "<< BEGIN TEST CASE OUTPUT >>"
      python3 $1.py < \$i
      echo "<< END TEST CASE OUTPUT >>"
      printf '\n'
    fi
  done
  ;;
esac
EOL
;;

################################################################################
# C++
###############################################################################

"cpp")
touch "$1.cpp"
cat > "$1.cpp" << EOL
/*
Rating: ~ $RATING / 10
Link: https://open.kattis.com/problems/$1
*/

#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

int main() {

  return 0;
}
EOL

# make compile and run script
touch "run"
chmod +x "run"
cat > "run" << EOL
#!/bin/bash

if [[ "\$#" -ne 1 ]]; then
  echo "Usage: ./run <c++-compiler>"
  exit
fi

command -v \$1 >/dev/null 2>&1 || {
  echo >&2 "Invalid c++ compiler: \$1"
  exit
}

\$1 $1.cpp -o $1

for i in \$( ls ); do
  if [[ \$i == *".in" ]]; then
    echo "Running test case \"\$i\"..."
    echo "<< BEGIN TEST CASE OUTPUT >>"
    ./$1 < \$i
    echo "<< END TEST CASE OUTPUT >>"
    printf '\n'
  fi
done
EOL
;;

###############################################################################
# JAVA
###############################################################################

"java")
touch "$1.java"
cat > "$1.java" << EOL
/*
Rating: ~ $RATING / 10
Link: https://open.kattis.com/problems/$1
*/

import java.io.*;
import java.util.*;

public class $1 {

  static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

  public static void main(String[] args) {

  }
}
EOL

# make compile and run script
touch "run"
chmod +x "run"
cat > "run" << EOL
#!/bin/bash

if [[ "\$#" -ne 0 ]]; then
  echo "Usage: ./run"
  exit
fi

command -v javac >/dev/null 2>&1 || {
  echo >&2 "Java compiler not detected"
  exit
}

javac $1.java

for i in \$( ls ); do
  if [[ \$i == *".in" ]]; then
    echo "Running test case \"\$i\"..."
    echo "<< BEGIN TEST CASE OUTPUT >>"
    java $1 < \$i
    echo "<< END TEST CASE OUTPUT >>"
    printf '\n'
  fi
done
EOL
;;

esac

