#!/bin/bash

# check dependencies
DEPS=( "curl" "grep" "python3" )
for dep in "${DEPS[@]}"; do
  command -v $dep >/dev/null 2>&1 || {
    printf >&2 "$dep required";
    exit
  }
done

# usage dialogue
function usage {
  printf "Usage: katti [-v] [-g problem-id | -r | -p]\n" >&2
  exit
}

# working directory
CURRENT_DIR=$( pwd )

function get_problem {
  PROBLEM_ID=$1

  # directory for storing sample ins and solution file
  SAMPLEDIR="$CURRENT_DIR/$1"
  
  mkdir -p $1
  cd $1
  # check for sample inputs
  printf "Finding sample inputs...\n"
  STATUS=$( curl -w %{http_code} -sL -o /dev/null "https://open.kattis.com/problems/$1/file/statement/samples.zip" )

  if [[ $STATUS != 200 ]]; then
    printf "URL responded with non 200 status\n"
    printf "Sample inputs may not exist\n"
  else
    printf "Sample inputs found. Downloading samples...\n"
    curl -sL -o "sample.zip" "https://open.kattis.com/problems/$1/file/statement/samples.zip"
    printf "Unzipping samples...\n"
    unzip -q "sample.zip"
    rm "sample.zip"
  fi

  # get file extension
  EXT_IN=""
  printf "Enter your solution's file extension: "
  read EXT_IN
  
  LANGS=( "py" "cpp" "java" )
  for lang in "${LANGS[@]}"; do
    printf "$EXT_IN" | grep -i "$lang" >/dev/null
    if [[ $? == 0 ]]; then
      EXTENSION=$lang
      break
    fi
  done
  
  # check file extension unset
  if [[ -z "$EXTENSION" ]]; then
    printf "Language extension \"$EXT_IN\" not supported\n"
    exit
  fi

  # get difficulty info from website
  HTML=$( curl -sL "https://open.kattis.com/problems/$1" )
  RATING=$( echo "$HTML" | grep -Go "Difficulty:[ a-z</>]*[0-9].[0-9]" )
  RATING=${RATING:(-3)}
  
  case $EXTENSION in
  
################################################################################
# PYTHON
################################################################################
  
"py")
touch "$1.py"
cat > "$1.py" << EOL
# Rating: ~ $RATING / 10
# Link: https://open.kattis.com/problems/$1
  
def main():
  
  
if __name__ == '__main__':
  main()
EOL
;;
  
################################################################################
# C++
###############################################################################
  
"cpp")
touch "$1.cpp"
cat > "$1.cpp" << EOL
/*
Rating: ~ $RATING / 10
Link: https://open.kattis.com/problems/$1
*/
  
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

int main() {

  return 0;
}
EOL
;;

###############################################################################
# JAVA
###############################################################################

"java")
touch "$1.java"
cat > "$1.java" << EOL
/*
Rating: ~ $RATING / 10
Link: https://open.kattis.com/problems/$1
*/

import java.io.*;
import java.util.*;

public class $1 {

  static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

  public static void main(String[] args) {

  }
}
EOL
;;

esac
}

# run all the test cases for given problem
function run_problem {
  # directory name indicates file name
  DIR_NAME=$( basename $( pwd ) )
  for i in $( ls ); do
    if [[ $i == "$DIR_NAME."* ]]; then
      # get file extension
      SUFFIX=$( printf "$i" | cut -d "." -f 2 )

      case $SUFFIX in
        "cpp" )
          # supported compilers
          compilers=( "g++" "clang++" )
          for comp in "${compilers[@]}"; do
            # check if compiler exists
            command -v $comp >/dev/null 2>&1 && {
              printf "Compiler $comp found\n"
              COMPILER=$comp
              break
            }
          done
          # if compiler unset, then no suitable compiler exists
          if [[ -z $COMPILER ]]; then
            printf "No supported compiler found\n" >&2
            printf "Supported: g++, clang++\n" >&2
            exit
          fi

          # compile
          $COMPILER $i -o "$DIR_NAME.o"
          # run all test cases
          printf "Test Cases:\n"
          for test_case in $( ls ); do
            BASE="${test_case%.in}"
            if [[ $test_case == *".in" ]]; then
              ./"$DIR_NAME.o" < $test_case > "out"
              # compare outputs
              cmp "out" "$BASE.ans" >/dev/null
              # pass
              if [[ $? == 0 ]]; then
                printf "%s" "+"
              # fail
              else
                printf "%s" "-"
              fi
              rm "out"
            fi
          done
          printf "\n"
          # clean up object files
          rm *".o"
        ;;
        "java" )
          # detect JRE
          command -v "javac" >/dev/null 2>&1 || {
            printf "Java compiler not found\n" >&2
            exit
          }
          # compile
          javac $i
          # run all test cases
          printf "Test Cases:\n"
          for test_case in $( ls ); do
            BASE="${test_case%.in}"
            if [[ $test_case == *".in" ]]; then
              java $DIR_NAME < $test_case > "out"
              # compare outputs
              cmp "out" "$BASE.ans" >/dev/null
              # pass
              if [[ $? == 0 ]]; then
                printf "%s" "+"
              # fail
              else
                printf "%s" "-"
              fi
              rm "out"
            fi
          done
          printf "\n"
          # clean up class files 
          rm *".class"
        ;;
        "py" )
          # detect python aliases
          command -v "python2" >/dev/null 2>&1 && {
            PY2=$( python2 -V 2>&1 | grep -Go "[0-9]*\.[0-9]*\.[0-9]*" )
          }
          command -v "python3" >/dev/null 2>&1 && {
            PY3=$( python3 -V 2>&1 | grep -Go "[0-9]*\.[0-9]*\.[0-9]*" )
          }
          
          # try to infer version
          grep "xrange" $i >/dev/null && INFER=1
          grep "raw_input" $i >/dev/null && INFER=1
          if [[ -z $INFER ]]; then
            VERSION=3
          else
            VERSION=2
          fi
          case $VERSION in
            2 )
              # does not use system wide python, only alias python2
              if [[ -z $PY2 ]]; then
                printf "Alias python2 not found\n" >&2
                exit
              fi
              # run test cases
              printf "Test Cases:\n"
              for test_case in $( ls ); do
                BASE="${test_case%.in}"
                if [[ $test_case == *".in" ]]; then
                  python2 $i < $test_case > "out"
                  # catch python traceback
                  if [[ $? != 0 ]]; then
                    printf "\nAborting test cases...\n"
                    rm "out"
                    exit
                  fi
                  cmp "out" "$BASE.ans" >/dev/null
                  if [[ $? == 0 ]]; then
                    printf "%s" "+"
                  else
                    printf "%s" "-"
                  fi
                  rm "out"
                fi
              done
              printf "\n"
            ;;
            3 )
              # does not use system wide python, only alias python3
              if [[ -z $PY3 ]]; then
                printf "Alias python3 not found\n" >&2
                exit
              fi
              # run test cases
              printf "Test Cases:\n"
              for test_case in $( ls ); do
                BASE="${test_case%.in}"
                if [[ $test_case == *".in" ]]; then
                  python3 $i < $test_case > "out"
                  # catch python traceback
                  if [[ $? != 0 ]]; then
                    printf "\nAborting test cases...\n"
                    rm "out"
                    exit
                  fi
                  cmp "out" "$BASE.ans" >/dev/null
                  if [[ $? == 0 ]]; then
                    printf "%s" "+"
                  else
                    printf "%s" "-"
                  fi
                  rm "out"
                fi
              done
              printf "\n"
            ;;
          esac
        ;;
        * )
          continue
        ;;
      esac
    fi
  done
}

function post_problem {
  if [[ ! -f "$HOME/.kattisrc" ]]; then
    printf ".kattisrc file not found\n"
    printf "Aborting...\n"
    exit
  fi

  if [[ ! -f "$HOME/.katt_submit.py" ]]; then
    printf "Submit script not found\n"
    printf "Aborting...\n"
    exit
  fi
  
  DIR_NAME=$( basename $( pwd ) )
  for i in $( ls ); do
    if [[ $i == "$DIR_NAME."* ]]; then
      # get file extension
      SUFFIX=$( printf "$i" | cut -d "." -f 2 )
      case $SUFFIX in
        "cpp" )
          python3 $HOME/.katt_submit.py $i
          break
        ;;
        "java" )
          python3 $HOME/.katt_submit.py $i
          break
        ;;
        "py" )
          python3 $HOME/.katt_submit.py $i
          break
        ;;
      esac
    fi
  done   
}

# store number of args passed
while getopts ":g:rp" opt; do
  case ${opt} in
    g )
      EMPTY="false"
      if [[ $# -gt 3 ]]; then
        usage
        exit
      fi
      get_problem $OPTARG
      ;;
    r )
      EMPTY="false"
      if [[ $# -gt 2 ]]; then
        usage
        exit
      fi
      run_problem
      ;;
    p )
      EMPTY="false"
      if [[ $# -gt 2 ]]; then
        usage
        exit
      fi
      post_problem
      ;;
  esac
done
shift $((OPTIND -1))

if [[ -z $EMPTY ]]; then
  usage
fi
